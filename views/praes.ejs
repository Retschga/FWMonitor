<!DOCTYPE html>
<html lang="de">
    <head>

		<!-- HTML EINSTELLUNGEN -->
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>FWmonitor - Präsentation</title>

		<!-- CSS -->
        <link rel="stylesheet" type="text/css" href="stylesheets/main.css">
		<link rel="stylesheet" type="text/css" href="stylesheets/standby.css">		
		
		<!-- MOBILE UI -->
		<link rel="stylesheet" href="/mobileui/base/reset.css">
		<link rel="stylesheet" href="/mobileui/base/mobileui.css">
		<link rel="stylesheet" href="/mobileui/base/colors.css">
		<link rel="stylesheet" href="/mobileui/base/font.css">
		<link rel="stylesheet" href="/mobileui/base/icons.css">	
		<link rel="stylesheet" href="/mobileui/header/style.css">
		<link rel="stylesheet" href="/mobileui/button/style.css">		
		<link rel="stylesheet" href="/mobileui/list/style.css">
		<link rel="stylesheet" href="/mobileui/page/style.css">	
		<link rel="stylesheet" href="/mobileui/grid/style.css">		
		<link rel="stylesheet" href="/mobileui/menu/style.css">	
		<link rel="stylesheet" href="/mobileui/input/style.css">	
		<link rel="stylesheet" href="/mobileui/loading/style.css">
		<link rel="stylesheet" href="/mobileui/alert/style.css">
		<link rel="stylesheet" href="/mobileui/toast/style.css">
	
		<style>
			/* RESET */
			* {
			  box-sizing: border-box;
			  margin: 0;
			  padding: 0;
			}
			
			html {
				height:100%;
			}

			body {
			  font-family: Arial, Helvetica, sans-serif;
			  line-height: 1.4;
			  height: 100%;
			}
		</style>
	</head>
	<body>

		<!-- HEADER -->
		<header class="header red-600">
			<div class="left">
				<button class="icon ion-navicon-round"  name="button"  onclick="openMenu('leftMenu')"></button>
			</div>		
			<div class="right" id="time">--:--:-- - --.--.----</div>
			<div class="right align-center" id="fwlogo">
				<img class="fwlogo_logo" src="images/logo.png" alt=""> 
				<%= data["fw_name"] %>
				<img class="fwlogo_logo" src="images/logo.png" alt=""> 
			</div>
		</header>
		
		<!-- MENÜ -->
		<div class="menu red-300" id="leftMenu">
			<div class="cover align-center red-600 border-bottom-white">
				<div class="space"></div>
				<img class="avatar circle border-white shadow" src="/images/icons/icon-384x384.png" style="width: 30%"/>
				<h1 class="">FWmonitor</h1>
				<div class="space"></div>
			</div>
			<button class="red-600 full border-bottom-white selectedButton" onclick="window.location.href = '/';" >Standby Ansicht</button>
			<button class="red-600 full border-bottom-white" onclick="window.location.href = '/einstell';" >Einstellungen</button>
			<button class="red-600 full border-bottom-white" onclick="window.location.href = '/alarm?manuell=true';" >Letzter Alarm</button>
			<button class="red-600 full border-bottom-white" onclick="alert('F11 drücken')" >Vollbild</button>
		</div>
		
		<!-- OFFLINEWARNUNG -->
		<div id="offlinewarning" style="visibility: hidden;">
			<span>
				Offline !
			</span>
		</div>
		
		<!-- CONTENT -->
		<div class="content has-header bgcolor">
		
			<div class="float-bottom-right">
				<div class="align-right" style="margin-bottom: 0.4em;">
				  <button id="prev" class="green circle icon ion-minus shadow"></button>
				  <button id="next" class="green circle icon ion-plus shadow"></button>			 
				</div>
				<div class="padding border-grey-400 shadow radius green">
					<span id="pdfName" class="align-right" style="margin-right: 1em;"></span>
					<span><span id="page_num"></span> / <span id="page_count"></span></span>
				</div>
			</div>
			
			<div style="width: 100%; height: 100%; padding: 1em;">		
				<div style="width: 100%; height: 100%; display: flex; justify-content: center; align-items:center;" id="canvas-container">
					<canvas id="the-canvas" style="margin: 0 auto"></canvas>
				</div>
			</div>
		</div>
			
			
		<!-- JS -->
		<script src="/javascripts/pdf.js"></script>
		<script>
			// Uhrzeit
			setInterval(() => {
				var d = new Date();
				var options = {  year: 'numeric', month: '2-digit', day: '2-digit' };
				var time = d.toLocaleTimeString();
				var date = d.toLocaleDateString('de-DE', options);
				document.getElementById('time').innerHTML = time + " - " + date;
			  }, 1000)

			// Scrolling
			var parts = window.location.search.substr(1).split("&");
			var $_GET = {};
			for (var i = 0; i < parts.length; i++) {
				var temp = parts[i].split("=");
				$_GET[decodeURIComponent(temp[0])] = decodeURIComponent(temp[1]);
			}		
		</script>
		<script id="script">
			var name = $_GET['name'];
			var url = 'praesentationen/' + name;
		
			document.getElementById('pdfName').innerHTML = name;
			var canvCont = document.getElementById('canvas-container');
			pdfjsLib.GlobalWorkerOptions.workerSrc = '/javascripts/pdf.worker.js';

			var pdfDoc = null,
				pageNum = 1,
				pageRendering = false,
				pageNumPending = null,
				scale = 0.8,
				canvas = document.getElementById('the-canvas'),
				ctx = canvas.getContext('2d');

			/**
			 * Get page info from document, resize canvas accordingly, and render page.
			 * @param num Page number.
			 */
			function renderPage(num) {
				// Loader öffnen
				loading('Please wait...');
			 	pageRendering = true;
			  	// Using promise to fetch the page
			 	pdfDoc.getPage(num).then(function(page) {			  
					var viewport = page.getViewport({ scale: 1 });
				
					scale = Math.min( canvCont.clientWidth/viewport.width, canvCont.clientHeight/viewport.height)
					
					console.log(scale, canvCont.clientHeight,  viewport.height, viewport.height * scale);
					
					viewport = page.getViewport({scale: scale});
					canvas.height = viewport.height;
					canvas.width = viewport.width;

					// Render PDF page into canvas context
					var renderContext = {
					canvasContext: ctx,
					viewport: viewport
					};
					var renderTask = page.render(renderContext);

					// Wait for rendering to finish
					renderTask.promise.then(function() {
						closeLoading();
					pageRendering = false;
					if (pageNumPending !== null) {
						// New page rendering is pending
						renderPage(pageNumPending);
						pageNumPending = null;
					}
					});
			  	});

			  // Update page counters
			  document.getElementById('page_num').textContent = num;
			}

			/**
			 * If another page rendering in progress, waits until the rendering is
			 * finised. Otherwise, executes rendering immediately.
			 */
			function queueRenderPage(num) {
			  if (pageRendering) {
				pageNumPending = num;
			  } else {
				renderPage(num);
			  }
			}

			/**
			 * Displays previous page.
			 */
			function onPrevPage() {
			  if (pageNum <= 1) {
				return;
			  }
			  pageNum--;
			  queueRenderPage(pageNum);
			}
			document.getElementById('prev').addEventListener('click', onPrevPage);

			/**
			 * Displays next page.
			 */
			function onNextPage() {
			  if (pageNum >= pdfDoc.numPages) {
				return;
			  }
			  pageNum++;
			  queueRenderPage(pageNum);
			}
			document.getElementById('next').addEventListener('click', onNextPage);


			window.onload = function() {
				/**
				 * Asynchronously downloads PDF.
				 */
				pdfjsLib.getDocument(url).promise.then(function(pdfDoc_) {
				  pdfDoc = pdfDoc_;
				  document.getElementById('page_count').textContent = pdfDoc.numPages;

				  // Initial/first page rendering
				  renderPage(pageNum);
				});
			}
		</script>
		<script>
			var lastKeepAlive = new Date();
		
			// Daten empfangen
			function processMessage(data) {
				console.log('Message:', data);
			
				var dat = data.split('|');
				topic = dat[0];
				msg = dat[1].split('%');
				
				if(topic == 'keepAlive') {
					if(msg == "OK") {
						lastKeepAlive = new Date();
						document.getElementById("offlinewarning").style.visibility = "hidden"; 
					}
				}

				if(topic == 'alarm')
					window.location.href = '/alarm';

				if(topic == 'praes_end')
					window.location.href = '/';

				if(topic == 'praes_prev') {
					onPrevPage();                     
				}

				if(topic == 'praes_next') {
					onNextPage();					   
				}	

				if(topic == 'praes_play') {
					document.getElementById("canvas-container").classList.remove('hidden');				   
				}	
				
				if(topic == 'praes_pause') {
					document.getElementById("canvas-container").classList.add('hidden');				   
				}
				
			}		
		
			// Websocket für Dynamische Inhalte, Alarm
			function connect() {			
				var keepAliveInterval = null;
				var ws = new WebSocket('ws://'+window.location.hostname+':8080');
				
				ws.onopen = function() {
					console.log("WebSocketClient connected:");
					this.send("WebClient - Alarmdisplay - Praesentation");
					
					keepAliveInterval = setInterval(() => {
						this.send("keepAlive");
						if((new Date().getTime() - lastKeepAlive.getTime()) / 1000 > 60) {
							document.getElementById("offlinewarning").style.visibility = "visible"; 
						}
					}, 10000)
				};

				// Daten empfangen
				ws.onmessage = function(e) {
					processMessage(e.data);
				};

				// Socket geschlossen
				ws.onclose = function(e) {
					clearInterval(keepAliveInterval);
					document.getElementById("offlinewarning").style.visibility = "visible";
					console.log('Socket is closed. Reconnect will be attempted in 1 second.', e.reason);
					setTimeout(function() {
						connect();
					}, 1000);
				};

				// Scoket Fehler
				ws.onerror = function(err) {
					clearInterval(keepAliveInterval);
					document.getElementById("offlinewarning").style.visibility = "visible";
					console.error('Socket encountered error: ', err.message, 'Closing socket');
					ws.close();
				};
			}
			connect();
		</script>
			
		<!-- MOBILE UI -->
		<script src="/mobileui/base/base.js"></script>
		<script src="/mobileui/button/script.js"></script>
		<script src="/mobileui/toast/script.js"></script>
		<script src="/mobileui/page/script.js"></script>
		<script src="/mobileui/menu/script.js"></script>
		<script src="/mobileui/input/script.js"></script>
		<script src="/mobileui/loading/script.js"></script>
		<script src="/mobileui/alert/script.js"></script>
	</body>
</html>